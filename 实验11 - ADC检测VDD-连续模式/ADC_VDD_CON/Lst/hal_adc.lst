C51 COMPILER V9.52.0.0   HAL_ADC                                                           04/29/2015 09:32:27 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE HAL_ADC
OBJECT MODULE PLACED IN .\Object\hal_adc.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE hal\nrf24le1\hal_adc.c BROWSE INCDIR(hal\nrf24le1;hal;compiler\c51;compiler
                    -\common) DEBUG OBJECTEXTEND PRINT(.\Lst\hal_adc.lst) TABS(2) OBJECT(.\Object\hal_adc.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 224 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_adc
  16           */
  17          
  18          #include <stdint.h>
  19          #include <stdbool.h>
  20          
  21          #include "nrf24le1.h"
  22          #include "nordic_common.h"
  23          #include "hal_adc.h"
  24          
  25          
  26          void hal_adc_set_input_channel(hal_adc_input_channel_t chsel)
  27          { // Update "chsel" bits
  28   1        ADCCON1 = ((ADCCON1 & 0xC3) | (((uint8_t)(chsel) << 2) & ~0xC3));
  29   1      }
  30          
  31          
  32          void hal_adc_set_reference(hal_adc_reference_t refsel)
  33          { // Update "refsel" bits
  34   1        ADCCON1 = ((ADCCON1 & 0xFC) | (((uint8_t)(refsel)) & ~0xFC));
  35   1      }
  36          
  37          
  38          void hal_adc_set_input_mode(hal_adc_input_mode_t input_mode)
  39          { // Update "diffm" bits
  40   1        ADCCON2 = ((ADCCON2 & 0x3F) | ((uint8_t)(input_mode) << 6));
  41   1      }
  42          
  43          
  44          void hal_adc_set_conversion_mode(hal_adc_conversion_mode_t conv_mode)
  45          { // Update "cont" bit
  46   1        ADCCON2 = ((ADCCON2 & 0xDF) | (((uint8_t)(conv_mode) << 5) & ~0xDF));
  47   1      }
  48          
  49          
  50          void hal_adc_set_sampling_rate(hal_adc_sampling_rate_t rate)
  51          { // Update "rate" bits
  52   1        ADCCON2 = ((ADCCON2 & 0xE3) | (((uint8_t)(rate) << 2) & ~0xE3));
  53   1      }
  54          
C51 COMPILER V9.52.0.0   HAL_ADC                                                           04/29/2015 09:32:27 PAGE 2   

  55          
  56          void hal_adc_set_power_down_delay(hal_adc_power_down_delay_t pdd)
  57          { // Update "rate" bits
  58   1        ADCCON2 = ((ADCCON2 & 0xE3) | (((uint8_t)(pdd) << 2) & ~0xE3));
  59   1      }
  60          
  61          
  62          void hal_adc_set_acq_window(hal_adc_acq_window_t tacq)
  63          { // Update "tacq" bits
  64   1        ADCCON2 = ((ADCCON2 & 0xFC) | (((uint8_t)(tacq)) & ~0xFC));
  65   1      }
  66          
  67          
  68          void hal_adc_set_resolution(hal_adc_resolution_t res)
  69          { // Update "resol" bits
  70   1        ADCCON3 = ((ADCCON3 & 0x3F) | ((uint8_t)(res) << 6));
  71   1      }
  72          
  73          
  74          void hal_adc_set_data_just(hal_adc_data_just_t just)
  75          { // Update "rljust" bit
  76   1        ADCCON3 = ((ADCCON3 & 0xDF) | (((uint8_t)(just) << 5) & ~0xDF));
  77   1      }
  78          
  79          
  80          void hal_adc_start(void)
  81          {
  82   1        uint8_t cnt = ADC_STARTUP_CNT;             // Get the counter value
  83   1        ADCCON1 = ADCCON1 | BIT_7;                 // Set "pwrup" bit
  84   1      
  85   1        while(cnt--){}                         // Wait for busy bit to stabilize
  86   1      }
  87          
  88          
  89          uint8_t hal_adc_read_LSB(void)
  90          {
  91   1        return ADCDATL;                            // Return value stored in ADCDATL
  92   1      }
  93          
  94          uint8_t hal_adc_read_MSB(void)
  95          {
  96   1        return ADCDATH;                            // Return value stored in ADCDATH
  97   1      }
  98          
  99          bool hal_adc_busy(void)
 100          {
 101   1        return ((ADCCON1 & BIT_6));            // Return status of "busy" bit
 102   1      }
 103          
 104          hal_adc_overflow_t hal_adc_get_overflow_status(void)
 105          {
 106   1        return (hal_adc_overflow_t)((ADCCON3 & (BIT_3 | BIT_4)) >> 3);
 107   1      }
 108                                                // Return status bits from ADCCON3


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    171    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.52.0.0   HAL_ADC                                                           04/29/2015 09:32:27 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
